#!/usr/bin/env bash
# Github: Karmenzind/dotfiles-and-scripts
# a script to manage aria2

download_dir=${HOME}/Downloads/aria2

# -----------------------------------------------------------------------------
# /* custom variables */

# follow your aria2 config
log_path=${HOME}/Downloads/aria2/_log

# url to fetch bt-tracker list
# if your have no idea what it is
# see http://www.senra.me/solutions-to-aria2-bt-metalink-download-slowly/
trackerlist_url="https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_best_ip.txt"
# update frequency
update_interval_hours=4

# to save your trackerlist
# no need to change
config_dir=${HOME}/.config/aria2 # trackerlist

# \ Leave open_browser/save_history to 0 
# \ if you don't need functions as follows

# open a web manage page while running this script
open_browser=0
web_url='http://aria2c.com/'
# shoud be found by `which`
browser=chromium

# move log file to specific dir when restart
save_history=0
history_dir=${HOME}/Downloads/aria2/logs # leave it to '' if you don't need it

# aria2c running paramters. See aria2c's man page
aria2c_params="$@"

# -----------------------------------------------------------------------------

mkdir -p $config_dir
mkdir -p $download_dir
mkdir -p `dirname "$log_path"`
[[ ! -e $log_path ]] && touch $log_path

cut_off='--------------------------------------------'
is_running=0
save_trackerlist_path=${config_dir}/trackerlist
trackers=`cat $save_trackerlist_path`

help() {
    echo $cut_off
    cat << EOF

This is a script to manage your aria2.

Usage:
    $0 [OPTION]

Options:
    start [params]      Start your aria2c and update bt-tracker list if conformed
                        *params: aria2c running paramters. See aria2c's man page
    restart [params]    
    stop        

    update              Force-update bt-tracker list
    log                 Output appended log as the file grows
    status              Check running status

    ...(to be continued)


Feedback:
    github: Karmenzind
    email: valesail@gmail.com

EOF
}

try_exec() {
    which $1 > /dev/null 2>&1
    (( $? == 0 )) && $@
}

stop() {
    if ((!is_running)); then
        echo -e 'No need to stop.'
    else
        echo -e  '\nStopping...'
        ps -aux | grep aria2c | grep -v 'grep' | awk '{ print $2 }' | xargs -n 1 kill -9 #--verbose
        psinfo
    fi
}

start() {
    if (( is_running )); then
        echo -e 'No need to start.'
    else
        internal_update_condition && update
        if (( $save_history )) && [[ -e $log_path ]]; then
            mkdir -p $history_dir
            mv -v $log_path "${history_dir}/until_`date +%s`.log"
        fi
        echo -e  '\nStarting...'
        [[ -n ${trackers} ]] && aria2c_params="--bt-tracker=$trackers $aria2c_params"
        echo '[PARAMETERS]' $aria2c_params
        aria2c $aria2c_params
        psinfo
    fi
}

log() {
    echo -e  '\nLOG:'
    tail $log_path $1
}

# return 1: need update
internal_update_condition() {
    if [[ ! -e $save_trackerlist_path ]]; then
        return 0
    else
        last_modify=`stat $save_trackerlist_path | grep -i Modify`
        last_modify_stamp=`date +%s -d "${last_modify#*:}"`
        now_ts=`date +%s`
        # echo $last_modify
        # echo $last_modify_stamp $now_ts
        time_dist=$(( $now_ts - $last_modify_stamp )) 
        echo "It's been $time_dist sec since last update."
        interval_second=$(( $update_interval_hours * 3600 ))
        if (( $time_dist < $interval_second )); then
            echo -e "Last updated at $last_modify.\nNo need to update."
        else
            return 0
        fi
    fi
    return 1
}

process_raw_trackerlist() {
    python -c "
import sys 
urls = (_.strip() for _ in sys.stdin if _.strip())
result = ';'.join(urls)
print(result)
"
}

update_bt_tracker() {
    echo "Feching tracker-list from $trackerlist_url ..."
    trackers=`curl $trackerlist_url | process_raw_trackerlist `
    if (( $? == 0 )) && [[ -n $trackers ]]; then
        echo -e '\nGot new tracker-list:'
        echo $trackers | tee $save_trackerlist_path
    else
        echo -e '\nFailed to get new tracker-list'
    fi
}

# to be continued
update() {
    update_bt_tracker
}


clear
try_exec figlet aria2

psinfo() {
    msg=`ps -aux | grep aria2c | grep -v 'grep'`
    if [[ -n "$msg" ]]; then
        is_running=1
        echo -e  '\nPS:\n' $msg
    else
        is_running=0
    fi
    echo -e  '\nCurrent status:' `((is_running)) && echo -e 'RUNNING' || echo -e 'STOPPED'`
}

case $1 in
    start)      psinfo; shift; start $@             ;;
    stop)       psinfo; stop                        ;;
    restart)    psinfo; stop; shift; start $@       ;;
    status)     psinfo; log                         ;;
    update)     psinfo; update force                ;;
    log)        psinfo; log -f                      ;;
    *)          help                                ;;
esac

if (( open_browser )); then
    try_exec $browser 'http://aria2c.com/' > /dev/null
fi

echo -e $cut_off
echo -e '\nDONE :)'
